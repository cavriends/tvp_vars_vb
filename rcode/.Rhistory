mcmc_list <- append(mcmc_list, list(as.mcmc(matrix(bvar_fit$beta, ncol=dim(bvar_fit$beta)[1], ncol=dim(bvar_fit$beta)[2] + dim(bvar_fit$beta)[3]))))
}
mcmc_list <- as.mcmc_list(mcmc_list)
mpsrf <- gelman.diag(mcmc_list)$mpsrf
M = 3
sparsity = 0.20
T = 200
run = 1
p = 1
mcmc_iter = 500
mc_chains = 4
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
y <- y_dgp
mcmc_list <- list()
for (i in 1:mc_chains) {
mcmc_iter_bvar = mcmc_iter*5
bvar_fit <- bvar(data = y,
lags = p,
verbose = FALSE,
n_draw = mcmc_iter_bvar,
n_burn = floor(mcmc_iter_bvar/2))
mcmc_list <- append(mcmc_list, list(as.mcmc(matrix(bvar_fit$beta, ncol=dim(bvar_fit$beta)[1], ncol=dim(bvar_fit$beta)[2] + dim(bvar_fit$beta)[3]))))
}
mcmc_list <- as.mcmc.list(mcmc_list)
mpsrf <- gelman.diag(mcmc_list)$mpsrf
mcmc_list <- list()
for (i in 1:mc_chains) {
mcmc_iter_bvar = mcmc_iter*5
bvar_fit <- bvar(data = y,
lags = p,
verbose = FALSE,
n_draw = mcmc_iter_bvar,
n_burn = floor(mcmc_iter_bvar/2))
mcmc_list <- append(mcmc_list, list(as.mcmc(matrix(bvar_fit$beta, ncol=dim(bvar_fit$beta)[1], ncol=dim(bvar_fit$beta)[2] + dim(bvar_fit$beta)[3]))))
}
for (i in 1:mc_chains) {
mcmc_iter_bvar = mcmc_iter*5
bvar_fit <- bvar(data = y,
lags = p,
verbose = FALSE,
n_draw = mcmc_iter_bvar,
n_burn = floor(mcmc_iter_bvar/2))
mcmc_list <- append(mcmc_list, list(as.mcmc(matrix(bvar_fit$beta, ncol=dim(bvar_fit$beta)[1], ncol=(dim(bvar_fit$beta)[2] + dim(bvar_fit$beta)[3]))))
}
for (i in 1:mc_chains) {
mcmc_iter_bvar = mcmc_iter*5
bvar_fit <- bvar(data = y,
lags = p,
verbose = FALSE,
n_draw = mcmc_iter_bvar,
n_burn = floor(mcmc_iter_bvar/2))
mcmc_list <- append(mcmc_list, list(as.mcmc(matrix(bvar_fit$beta, ncol=dim(bvar_fit$beta)[1], ncol=(dim(bvar_fit$beta)[2] + dim(bvar_fit$beta)[3]))))
}
for (i in 1:mc_chains) {
mcmc_iter_bvar = mcmc_iter*5
bvar_fit <- bvar(data = y,
lags = p,
verbose = FALSE,
n_draw = mcmc_iter_bvar,
n_burn = floor(mcmc_iter_bvar/2))
mcmc_list <- append(mcmc_list, list(as.mcmc(matrix(bvar_fit$beta, ncol=dim(bvar_fit$beta)[1], ncol=(dim(bvar_fit$beta)[2] + dim(bvar_fit$beta)[3])))))
}
dim(bvar_fit$beta)[2] + dim(bvar_fit$beta)[3]
mcmc_iter*5
matrix(bvar_fit$beta, ncol=floor(mcmc_iter_bvar/2), ncol=M*(M+1))
matrix(bvar_fit$beta, nrow=floor(mcmc_iter_bvar/2), ncol=M*(M+1)
)
for (i in 1:mc_chains) {
mcmc_iter_bvar = mcmc_iter*5
bvar_fit <- bvar(data = y,
lags = p,
verbose = FALSE,
n_draw = mcmc_iter_bvar,
n_burn = floor(mcmc_iter_bvar/2))
mcmc_list <- append(mcmc_list, list(as.mcmc(matrix(bvar_fit$beta, nrow=floor(mcmc_iter_bvar/2), ncol=M*(M+1)))))
}
mcmc_list <- as.mcmc.list(mcmc_list)
mpsrf <- gelman.diag(mcmc_list)$mpsrf
mpsrf
M = 3
sparsity = 0.20
T = 200
run = 1
p = 1
mcmc_iter = 500
mc_chains = 4
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
y <- y_dgp
mcmc_list <- list()
for (i in 1:mc_chains) {
mcmc_iter_bvar = mcmc_iter*5
bvar_fit <- bvar(data = y,
lags = p,
verbose = FALSE,
n_draw = mcmc_iter_bvar,
n_burn = floor(mcmc_iter_bvar/2))
mcmc_list <- append(mcmc_list, list(as.mcmc(matrix(bvar_fit$beta, nrow=floor(mcmc_iter_bvar/2), ncol=M*(M+1)))))
}
mcmc_list <- as.mcmc.list(mcmc_list)
mpsrf <- gelman.diag(mcmc_list)$mpsrf
bvar_minnesota_GR <- function(T, M, p, y, mcmc_iter, mc_chains=4, print_status=FALSE) {
mcmc_list <- list()
for (i in 1:mc_chains) {
mcmc_iter_bvar = mcmc_iter*5
bvar_fit <- bvar(data = y,
lags = p,
verbose = FALSE,
n_draw = mcmc_iter_bvar,
n_burn = floor(mcmc_iter_bvar/2))
mcmc_list <- append(mcmc_list, list(as.mcmc(matrix(bvar_fit$beta, nrow=floor(mcmc_iter_bvar/2), ncol=M*(M+1)))))
}
mcmc_list <- as.mcmc.list(mcmc_list)
mpsrf <- gelman.diag(mcmc_list)$mpsrf
return(mpsrf)
}
setwd('/Users/cavriends/Dropbox/ESE/MSc Econometrics/Thesis/Bayesian VARs/Code/Jupyter/rcode/')
source("functions.R")
set.seed(9999) # For reproducability
# Set the datasets
number_of_datasets = 10
random_datasets = sample(1:200, number_of_datasets)
# Set the dataset parameters
T_list = c(100, 200)
m_list <- c(3,7)
sparsity_list = c(0.20, 0.40)
mcmc_iter_list <- c(2000,1000)
h_steps <- 8
p <- 1
gr_statistic <- function(T, M, mcmc_iter, sparsity) {
train = T+1-25
p <- 1
h_steps=8
mc_chains=4
mean_diagnostic = c()
for (run in random_datasets) {
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
# msrpf <- tvp_bar_GR(T, M, p, train, y_dgp, x_dgp, mcmc_iter, h_steps, mc_chains)
msrpf <- bvar_minnesota_GR(T, M, p, y_dgp, mcmc_iter, mc_chains)
mean_diagnostic <- rbind(mean_diagnostic, msrpf)
if (run == random_datasets[number_of_datasets]) {
print(paste(M, T, sparsity, "Mean GR", mean(mean_diagnostic), sep=" | "))
}
}
return(mean(mean_diagnostic))
}
gr_result <- c()
for (m in m_list) {
for (sparsity in sparsity_list){
for (T in T_list) {
gr_result <- cbind(gr_result, gr_statistic(T=T, M=m, mcmc_iter = mcmc_iter_list[which(m_list == m)], sparsity=sparsity))
}
}
}
mean_diagnostic
gr_statistic <- function(T, M, mcmc_iter, sparsity) {
train = T+1-25
p <- 1
h_steps=8
mc_chains=4
mean_diagnostic = c()
for (run in random_datasets) {
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
# msrpf <- tvp_bar_GR(T, M, p, train, y_dgp, x_dgp, mcmc_iter, h_steps, mc_chains)
msrpf <- bvar_minnesota_GR(T, M, p, y_dgp, mcmc_iter, mc_chains)
mean_diagnostic <- rbind(mean_diagnostic, msrpf)
if (run == random_datasets[number_of_datasets]) {
print(paste(M, T, sparsity, "Mean GR", mean(mean_diagnostic), sep=" | "))
}
}
return(mean(mean_diagnostic))
}
gr_statistic(200, 3, 2000, 0.40)
setwd('/Users/cavriends/Dropbox/ESE/MSc Econometrics/Thesis/Bayesian VARs/Code/Jupyter/rcode/')
source("functions.R")
set.seed(9999) # For reproducability
# Set the datasets
number_of_datasets = 10
random_datasets = sample(1:200, number_of_datasets)
# Set the dataset parameters
T_list = c(100, 200)
m_list <- c(3,7)
sparsity_list = c(0.20, 0.40)
mcmc_iter_list <- c(2000,1000)
h_steps <- 8
p <- 1
gr_statistic <- function(T, M, mcmc_iter, sparsity) {
train = T+1-25
p <- 1
h_steps=8
mc_chains=4
mean_diagnostic = c()
for (run in random_datasets) {
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
# msrpf <- tvp_bar_GR(T, M, p, train, y_dgp, x_dgp, mcmc_iter, h_steps, mc_chains)
msrpf <- bvar_minnesota_GR(T, M, p, y_dgp, mcmc_iter, mc_chains)
mean_diagnostic <- rbind(mean_diagnostic, msrpf)
if (run == random_datasets[number_of_datasets]) {
print(paste(M, T, sparsity, "Mean GR", mean(mean_diagnostic), sep=" | "))
}
}
return(mean(mean_diagnostic))
}
gr_result <- c()
for (m in m_list) {
for (sparsity in sparsity_list){
for (T in T_list) {
gr_result <- cbind(gr_result, gr_statistic(T=T, M=m, mcmc_iter = mcmc_iter_list[which(m_list == m)], sparsity=sparsity))
}
}
}
source('~/Dropbox/ESE/MSc Econometrics/Thesis/Bayesian VARs/Code/Jupyter/rcode/GelmanRubin.R', echo=TRUE)
setwd('/Users/cavriends/Dropbox/ESE/MSc Econometrics/Thesis/Bayesian VARs/Code/Jupyter/rcode/')
source("functions.R")
set.seed(9999) # For reproducability
# Set the datasets
number_of_datasets = 10
random_datasets = sample(1:200, number_of_datasets)
# Set the dataset parameters
T_list = c(100, 200)
m_list <- c(3,7)
sparsity_list = c(0.20, 0.40)
mcmc_iter_list <- c(2000,1000)
gr_statistic <- function(T, M, mcmc_iter, sparsity, mc_chains=4) {
train = T
p <- 1
mean_diagnostic_tvp_bar = c()
mean_diagnostic_bvar = c()
for (run in random_datasets) {
# Load simulated datasets
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
# Calculate Gelman-Rubin diagnostic
msrpf_tvp_bar <- tvp_bar_GR(T, M, p, train, y_dgp, x_dgp, mcmc_iter, mc_chains)
msrpf_bvar <- bvar_minnesota_GR(T, M, p, y_dgp, mcmc_iter, mc_chains)
# Add results to vector
mean_diagnostic_tvp_bar <- rbind(mean_diagnostic_tvp_bar, msrpf_tvp_bar)
mean_diagnostic_bvar <- rbind(mean_diagnostic_bvar, msrpf_bvar)
if (run == random_datasets[number_of_datasets]) {
print(paste(M, T, sparsity, "average GR - TVP-BVAR", mean(mean_diagnostic_tvp_bar), "average GR - BVAR", mean(msrpf_bvar),sep=" | "))
}
}
return_list <- list("mean_gr_tvp_bar" = mean(mean_diagnostic_tvp_bar),
"mean_gr_bvar" = mean(msrpf_bvar))
return(return_list)
}
gr_result <- c()
for (m in m_list) {
for (sparsity in sparsity_list){
for (T in T_list) {
gr_result <- cbind(gr_result, gr_statistic(T=T, M=m, mcmc_iter = mcmc_iter_list[which(m_list == m)], sparsity=sparsity))
}
}
}
setwd('/Users/cavriends/Dropbox/ESE/MSc Econometrics/Thesis/Bayesian VARs/Code/Jupyter/rcode/')
source("functions.R")
set.seed(12345) # For reproducability
# Set the datasets
number_of_datasets = 10
random_datasets = sample(1:200, number_of_datasets)
# Set the dataset parameters
T_list = c(100, 200)
m_list <- c(3,7)
sparsity_list = c(0.20, 0.40)
mcmc_iter_list <- c(2000,1000)
gr_statistic <- function(T, M, mcmc_iter, sparsity, mc_chains=4) {
train = T
p <- 1
mean_diagnostic_tvp_bar = c()
mean_diagnostic_bvar = c()
for (run in random_datasets) {
# Load simulated datasets
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
# Calculate Gelman-Rubin diagnostic
msrpf_tvp_bar <- tvp_bar_GR(T, M, p, train, y_dgp, x_dgp, mcmc_iter, mc_chains)
msrpf_bvar <- bvar_minnesota_GR(T, M, p, y_dgp, mcmc_iter, mc_chains)
# Add results to vector
mean_diagnostic_tvp_bar <- rbind(mean_diagnostic_tvp_bar, msrpf_tvp_bar)
mean_diagnostic_bvar <- rbind(mean_diagnostic_bvar, msrpf_bvar)
if (run == random_datasets[number_of_datasets]) {
print(paste(M, T, sparsity, "average GR - TVP-BVAR", mean(mean_diagnostic_tvp_bar), "average GR - BVAR", mean(msrpf_bvar),sep=" | "))
}
}
return_list <- list("mean_gr_tvp_bar" = mean(mean_diagnostic_tvp_bar),
"mean_gr_bvar" = mean(msrpf_bvar))
return(return_list)
}
gr_result <- c()
for (m in m_list) {
for (sparsity in sparsity_list){
for (T in T_list) {
gr_result <- cbind(gr_result, gr_statistic(T=T, M=m, mcmc_iter = mcmc_iter_list[which(m_list == m)], sparsity=sparsity))
}
}
}
setwd('/Users/cavriends/Dropbox/ESE/MSc Econometrics/Thesis/Bayesian VARs/Code/Jupyter/rcode/')
source("functions.R")
set.seed(12345) # For reproducability
# Set the datasets
number_of_datasets = 20
random_datasets = sample(1:200, number_of_datasets)
# Set the dataset parameters
T_list = c(100, 200)
m_list <- c(3,7)
sparsity_list = c(0.20, 0.40)
mcmc_iter_list <- c(2000,1000)
gr_statistic <- function(T, M, mcmc_iter, sparsity, mc_chains=4) {
train = T
p <- 1
mean_diagnostic_tvp_bar = c()
mean_diagnostic_bvar = c()
for (run in random_datasets) {
# Load simulated datasets
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
# Calculate Gelman-Rubin diagnostic
msrpf_tvp_bar <- tvp_bar_GR(T, M, p, train, y_dgp, x_dgp, mcmc_iter, mc_chains)
msrpf_bvar <- bvar_minnesota_GR(T, M, p, y_dgp, mcmc_iter, mc_chains)
# Add results to vector
mean_diagnostic_tvp_bar <- rbind(mean_diagnostic_tvp_bar, msrpf_tvp_bar)
mean_diagnostic_bvar <- rbind(mean_diagnostic_bvar, msrpf_bvar)
if (run == random_datasets[number_of_datasets]) {
print(paste(M, T, sparsity, "average GR - TVP-BVAR", mean(mean_diagnostic_tvp_bar), "average GR - BVAR", mean(mean_diagnostic_bvar),sep=" | "))
}
}
return_list <- list("mean_gr_tvp_bar" = mean(mean_diagnostic_tvp_bar),
"mean_gr_bvar" = mean(mean_diagnostic_bvar))
return(return_list)
}
gr_result <- c()
for (m in m_list) {
for (sparsity in sparsity_list){
for (T in T_list) {
gr_result <- cbind(gr_result, gr_statistic(T=T, M=m, mcmc_iter = mcmc_iter_list[which(m_list == m)], sparsity=sparsity))
}
}
}
gr_statistic <- function(T, M, mcmc_iter, sparsity, mc_chains=4) {
p <- 1
mean_diagnostic_tvp_bar = c()
mean_diagnostic_bvar = c()
for (run in random_datasets) {
# Load simulated datasets
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
# Calculate Gelman-Rubin diagnostic
msrpf_tvp_bar <- tvp_bar_GR(T, M, p, T-1, y_dgp, x_dgp, mcmc_iter, mc_chains)
msrpf_bvar <- bvar_minnesota_GR(T, M, p, y_dgp, mcmc_iter, mc_chains)
# Add results to vector
mean_diagnostic_tvp_bar <- rbind(mean_diagnostic_tvp_bar, msrpf_tvp_bar)
mean_diagnostic_bvar <- rbind(mean_diagnostic_bvar, msrpf_bvar)
# Print final result
if (run == random_datasets[number_of_datasets]) {
print(paste(M, T, sparsity, "average GR - TVP-BVAR", mean(mean_diagnostic_tvp_bar), "average GR - BVAR", mean(mean_diagnostic_bvar),sep=" | "))
}
}
return_list <- list("mean_gr_tvp_bar" = mean(mean_diagnostic_tvp_bar),
"mean_gr_bvar" = mean(mean_diagnostic_bvar))
return(return_list)
}
gr_statistic(200,3,2000,0.20)
source("functions.R")
set.seed(12345) # For reproducability
# Set the datasets
number_of_datasets = 20
random_datasets = sample(1:200, number_of_datasets)
# Set the dataset parameters
T_list = c(100, 200)
m_list <- c(3,7)
sparsity_list = c(0.20, 0.40)
mcmc_iter_list <- c(2000,1000)
gr_statistic_run <- function(T, M, mcmc_iter, sparsity, mc_chains=4) {
p <- 1
mean_diagnostic_tvp_bar = c()
mean_diagnostic_bvar = c()
for (run in random_datasets) {
# Load simulated datasets
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
# Calculate Gelman-Rubin diagnostic
msrpf_tvp_bar <- tvp_bar_GR(T, M, p, y_dgp, x_dgp, mcmc_iter, mc_chains)
msrpf_bvar <- bvar_minnesota_GR(T, M, p, y_dgp, mcmc_iter, mc_chains)
# Add results to vector
mean_diagnostic_tvp_bar <- rbind(mean_diagnostic_tvp_bar, msrpf_tvp_bar)
mean_diagnostic_bvar <- rbind(mean_diagnostic_bvar, msrpf_bvar)
# Print final result
if (run == random_datasets[number_of_datasets]) {
print(paste(M, T, sparsity, "average GR - TVP-BVAR", mean(mean_diagnostic_tvp_bar), "average GR - BVAR", mean(mean_diagnostic_bvar),sep=" | "))
}
}
return_list <- list("mean_gr_tvp_bar" = mean(mean_diagnostic_tvp_bar),
"mean_gr_bvar" = mean(mean_diagnostic_bvar))
return(return_list)
}
gr_statistic(200,3,2000,0.20)
gr_statistic_run <- function(T, M, mcmc_iter, sparsity, mc_chains=4) {
p <- 1
mean_diagnostic_tvp_bar = c()
mean_diagnostic_bvar = c()
for (run in random_datasets) {
# Load simulated datasets
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
# Calculate Gelman-Rubin diagnostic
msrpf_tvp_bar <- tvp_bar_GR(T, M, p, y_dgp, x_dgp, mcmc_iter, mc_chains)
msrpf_bvar <- bvar_minnesota_GR(T, M, p, y_dgp, mcmc_iter, mc_chains)
# Add results to vector
mean_diagnostic_tvp_bar <- rbind(mean_diagnostic_tvp_bar, msrpf_tvp_bar)
mean_diagnostic_bvar <- rbind(mean_diagnostic_bvar, msrpf_bvar)
# Print final result
if (run == random_datasets[number_of_datasets]) {
print(paste(M, T, sparsity, "average GR - TVP-BVAR", mean(mean_diagnostic_tvp_bar), "average GR - BVAR", mean(mean_diagnostic_bvar),sep=" | "))
}
}
return_list <- list("mean_gr_tvp_bar" = mean(mean_diagnostic_tvp_bar),
"mean_gr_bvar" = mean(mean_diagnostic_bvar))
return(return_list)
}
gr_statistic(200,3,2000,0.20)
setwd('/Users/cavriends/Dropbox/ESE/MSc Econometrics/Thesis/Bayesian VARs/Code/Jupyter/rcode/')
source("functions.R")
set.seed(12345) # For reproducability
# Set the datasets
number_of_datasets = 20
random_datasets = sample(1:200, number_of_datasets)
# Set the dataset parameters
T_list = c(100, 200)
m_list <- c(3,7)
sparsity_list = c(0.20, 0.40)
mcmc_iter_list <- c(2000,1000)
gr_statistic_run <- function(T, M, mcmc_iter, sparsity, mc_chains=4) {
p <- 1
mean_diagnostic_tvp_bar = c()
mean_diagnostic_bvar = c()
for (run in random_datasets) {
# Load simulated datasets
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
# Calculate Gelman-Rubin diagnostic
msrpf_tvp_bar <- tvp_bar_GR(T, M, p, y_dgp, x_dgp, mcmc_iter, mc_chains)
msrpf_bvar <- bvar_minnesota_GR(T, M, p, y_dgp, mcmc_iter, mc_chains)
# Add results to vector
mean_diagnostic_tvp_bar <- rbind(mean_diagnostic_tvp_bar, msrpf_tvp_bar)
mean_diagnostic_bvar <- rbind(mean_diagnostic_bvar, msrpf_bvar)
# Print final result
if (run == random_datasets[number_of_datasets]) {
print(paste(M, T, sparsity, "average GR - TVP-BVAR", mean(mean_diagnostic_tvp_bar), "average GR - BVAR", mean(mean_diagnostic_bvar),sep=" | "))
}
}
return_list <- list("mean_gr_tvp_bar" = mean(mean_diagnostic_tvp_bar),
"mean_gr_bvar" = mean(mean_diagnostic_bvar))
return(return_list)
}
gr_statistic(200,3,2000,0.20)
gr_statistic_run(200,3,2000,0.20)
setwd('/Users/cavriends/Dropbox/ESE/MSc Econometrics/Thesis/Bayesian VARs/Code/Jupyter/rcode/')
source("functions.R")
set.seed(12345) # For reproducability
# Set the datasets
number_of_datasets = 20
random_datasets = sample(1:200, number_of_datasets)
# Set the dataset parameters
T_list = c(100, 200)
m_list <- c(3,7)
sparsity_list = c(0.20, 0.40)
mcmc_iter_list <- c(2000,1000)
gr_statistic_run <- function(T, M, mcmc_iter, sparsity, mc_chains=4) {
p <- 1
mean_diagnostic_tvp_bar = c()
mean_diagnostic_bvar = c()
for (run in random_datasets) {
# Load simulated datasets
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients', M, T, p, sparsity, run, 'het',sep="_"),'.csv', sep=""), header=FALSE)
# Calculate Gelman-Rubin diagnostic
msrpf_tvp_bar <- tvp_bar_GR(T, M, p, y_dgp, x_dgp, mcmc_iter, mc_chains)
msrpf_bvar <- bvar_minnesota_GR(T, M, p, y_dgp, mcmc_iter, mc_chains)
# Add results to vector
mean_diagnostic_tvp_bar <- rbind(mean_diagnostic_tvp_bar, msrpf_tvp_bar)
mean_diagnostic_bvar <- rbind(mean_diagnostic_bvar, msrpf_bvar)
# Print final result
if (run == random_datasets[number_of_datasets]) {
print(paste(M, T, sparsity, "average GR - TVP-BVAR", mean(mean_diagnostic_tvp_bar), "average GR - BVAR", mean(mean_diagnostic_bvar),sep=" | "))
}
}
return_list <- list("mean_gr_tvp_bar" = mean(mean_diagnostic_tvp_bar),
"mean_gr_bvar" = mean(mean_diagnostic_bvar))
return(return_list)
}
gr_statistic_run(200,3,2000,0.20)
gr_result <- c()
for (m in m_list) {
for (sparsity in sparsity_list){
for (T in T_list) {
gr_result <- cbind(gr_result, gr_statistic_run(T=T, M=m, mcmc_iter = mcmc_iter_list[which(m_list == m)], sparsity=sparsity))
}
}
}
