variable_string <- c(variable_string, paste("V", i, sep=""))
}
colnames(x_all_complete) <- variable_string
data <- cbind(y_all,x_all_complete)
tvp_fit <- shrinkTVP(y_all ~ .,
data=data,
niter=mcmc_iter,
nburn=floor(mcmc_iter/2),
display_progress=FALSE)
estimated_coeff <- rbind(estimated_coeff, matrix(unlist(lapply(tvp_fit$beta, colMeans)), T)[,2:(M+1)])
}
dim(estimated_coeff)
mcmc_iter <-  500
y <- y_dgp
x <- x_dgp
estimated_coeff <- c()
M = 2
for (m in 1:M) {
y_all <- y[,m]
x_all <- x
if (m != 1) {
contemporaneous_y <- y[,seq(m-1)]
x_all_complete <- cbind(x_all, contemporaneous_y)
} else {
x_all_complete <- x_all
}
variable_string <- c()
number_of_variables <- dim(x_all_complete)[2]
for (i in 1:number_of_variables) {
variable_string <- c(variable_string, paste("V", i, sep=""))
}
colnames(x_all_complete) <- variable_string
data <- cbind(y_all,x_all_complete)
tvp_fit <- shrinkTVP(y_all ~ .,
data=data,
niter=mcmc_iter,
nburn=floor(mcmc_iter/2),
display_progress=FALSE)
estimated_coeff <- cbind(estimated_coeff, matrix(unlist(lapply(tvp_fit$beta, colMeans)), T)[,2:(M+1)])
}
t(estimated_coeff)
dim(t(estimated_coeff))
dim(t(estimated_coeff))
dim(t(estimated_coeff))[,1:T]
dim(t(estimated_coeff)[,1:T])
dim(t(estimated_coeff)[,2:T])
dim(coeff)
t(estimated_coeff)[,2:T] - coeff
(t(estimated_coeff)[,2:T] - coeff)^2
colMeans((t(estimated_coeff)[,2:T] - coeff)^2)
mean(colMeans((t(estimated_coeff)[,2:T] - coeff)^2))
mean((t(estimated_coeff)[,2:T] - coeff)^2)
mean((t(estimated_coeff)[,2:T] - coeff)^2,1)
mean(colMeans((t(estimated_coeff)[,2:T] - coeff)^2))
tvp_bar_msd <- function(T, M, p, y, x, mcmc_iter, true_coeff, print_status=FALSE) {
mcmc_iter <- mcmc_iter*2
estimated_coeff <- c()
for (m in 1:M) {
y_all <- y[,m]
x_all <- x
if (m != 1) {
contemporaneous_y <- y[,seq(m-1)]
x_all_complete <- cbind(x_all, contemporaneous_y)
} else {
x_all_complete <- x_all
}
variable_string <- c()
number_of_variables <- dim(x_all_complete)[2]
for (i in 1:number_of_variables) {
variable_string <- c(variable_string, paste("V", i, sep=""))
}
colnames(x_all_complete) <- variable_string
data <- cbind(y_all,x_all_complete)
tvp_fit <- shrinkTVP(y_all ~ .,
data=data,
niter=mcmc_iter,
nburn=floor(mcmc_iter/2),
display_progress=FALSE)
estimated_coeff <- cbind(estimated_coeff, matrix(unlist(lapply(tvp_fit$beta, colMeans)), T)[,2:(M+1)])
}
final_msd <- mean(colMeans((t(estimated_coeff)[,2:T] - coeff)^2))
return(final_msd)
}
mean(colMeans((t(estimated_coeff)[,2:T] - coeff)^2))
msd_tvp_var <- tvp_bar_msd(T, M, p, y, x, mcmc_iter, coeff)
msd_tvp_var
run <- 1
T = 200
train <- T+1-50
number_of_predictions <- T - train
h_steps <- 8
p <- 1
mcmc_iter <- 1000
M = 2
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
## VAR-OLS ##
start_time = proc.time()
msfe_var_ols <- var_ols(T, M, p, train, y_dgp, h_steps)
msd_var_ols <- var_ols_msd(T, M, p, y_dgp, coeff)
library(vars)
library(BVAR)
library(MARX)
library(shrinkTVP)
library(parallel)
standardize <- function(data, train) {
standardized = c()
for (m in 1:dim(data)[2]) {
x = data[,m]
mean = mean(x[1:train])
std = sd(x[1:train])
standardized = cbind(standardized, (x - mean)/std)
}
return(standardized)
}
h_step_msfe <- function(h_step, y_pred, y_true, train) {
msfe_list = list()
for (h in 0:(h_step-1)) {
msfe_vec = c()
number_of_predictions = dim(y_true)[1] - train - h
for (i in 1:number_of_predictions) {
msfe = (y_pred[[i]][h+1,] - y_true[train+i+h,])^2
msfe_vec = rbind(msfe_vec, msfe)
}
msfe_list = append(msfe_list, mean(colMeans(msfe_vec)))
}
return(msfe_list)
}
var_ols <- function(T, M, p, train, y, h_steps) {
predict_list_var <- list()
for (i in train:(T - 1)) {
y_subset <- y[1:i, ]
var_fit <- VAR(y_subset, lag = p)
predict_result <- predict(var_fit, n.ahead = h_steps)$fcst
predictions <- c()
for (m in 1:M) {
predictions <- cbind(predictions, predict_result[[m]][, 1])
}
predict_list_var <- append(predict_list_var, list(predictions))
}
msfe_var <- h_step_msfe(h_steps, predict_list_var, y, train)
return(msfe_var)
}
var_ols_msd <- function(T, M, p, y, true_coeff) {
var_fit <- VAR(y, lag = p)
estimated_coeff <- c()
for (m in 1:M) {
estimated_coeff <- cbind(estimated_coeff, var_fit$varresult[[m]][[1]][1:M])
}
msd <- c()
for (i in 1:(T-1)) {
msd <- rbind(msd, mean(estimated_coeff - matrix(true_coeff[,i], nrow=M, ncol=M))^2)
}
final_msd <- mean(msd)
return(final_msd)
}
bvar_minnesota <- function(T, M, p, train, y, x, mcmc_iter, h_steps, print_status=FALSE) {
predict_list_bvar <- list()
mcmc_iter_bvar = mcmc_iter*5
for (i in train:(T - 1)) {
if (print_status) {
if (i %% 10 == 0) {
cat("\014")
print("Progress of B-VAR with Minnesota prior...")
}
print(sprintf("Progress %i/%i", i - train + 1, number_of_predictions))
}
y_subset <- y[1:i, ]
bvar_fit <- bvar(data = y_subset,
lags = p,
#priors = bv_priors(hyper = c("full")),
fcast = bv_fcast(h_steps),
verbose = FALSE,
n_draw = mcmc_iter_bvar,
n_burn = floor(mcmc_iter_bvar/2))
predict_result <- predict(bvar_fit)
predictions <- c()
for (h in 1:h_steps) {
predictions <- rbind(predictions, colMeans(predict_result$fcast[, h, ]))
}
predict_list_bvar <- append(predict_list_bvar, list(predictions))
}
msfe_bvar <- h_step_msfe(h_steps, predict_list_bvar, y, train)
return(msfe_bvar)
}
bvar_minnesota_msd <- function(T, M, p, y, mcmc_iter, true_coeff, print_status=FALSE) {
mcmc_iter_bvar = mcmc_iter*10
bvar_fit <- bvar(data = y,
lags = p,
#priors = bv_priors(hyper = c("full")),
fcast = bv_fcast(h_steps),
verbose = FALSE,
n_draw = mcmc_iter_bvar,
n_burn = floor(mcmc_iter_bvar/2))
estimated_coeff <- colMeans(bvar_fit$beta)[2:(M+1),]
msd <- c()
for (i in 1:(T-1)) {
msd <- rbind(msd, mean(estimated_coeff - matrix(true_coeff[,i], nrow=M, ncol=M))^2)
}
final_msd <- mean(msd)
return(final_msd)
}
arx_ols <- function(T, M, p, train, y, x, h_steps) {
prediction_list <- list()
for (i in train:(T - 1)) {
prediction <- c()
for (m in 1:M) {
y_subset <- as.matrix(y[1:i,m])
x_subset <- as.matrix(x[1:i,])
if (m != 1) {
contemporaneous_y <- as.matrix(y[1:i,seq(m-1)])
x_complete <- cbind(x_subset, contemporaneous_y)
} else {
x_complete <- x_subset
}
arx_fit = arx.ls(y_subset, x_complete, p=0)
h_prediction <- c()
if (m != 1) {
for (h in 1:h_steps) {
h_prediction <- rbind(h_prediction, arx_fit$coefficients[2:(M+1+(m-1))] %*% t(cbind(as.matrix(x[i+h,]), as.matrix(y[i+h,seq(m-1)]))))
}
} else {
for (h in 1:h_steps) {
h_prediction <- rbind(h_prediction, arx_fit$coefficients[2:(M+1)] %*% t(as.matrix(x[i+h,])))
}
}
prediction <- cbind(prediction, h_prediction)
}
prediction_list <- append(prediction_list, list(prediction))
}
msfe_tvp_ols <- h_step_msfe(h_steps, prediction_list, y, train)
return(msfe_tvp_ols)
}
arx_ols_msd <- function(T, M, p, y, x, true_coeff) {
estimated_coeff <- c()
for (m in 1:M) {
y_all <- as.matrix(y[,m])
x_all <- as.matrix(x)
if (m != 1) {
contemporaneous_y <- as.matrix(y[,seq(m-1)])
x_all_complete <- cbind(x_all, contemporaneous_y)
} else {
x_all_complete <- x_all
}
arx_fit = arx.ls(y_all, x_all_complete, p=0)
estimated_coeff <- cbind(estimated_coeff, arx_fit$coefficients[2:(M+1)])
}
msd <- c()
for (i in 1:(T-1)) {
msd <- rbind(msd, mean(estimated_coeff - matrix(true_coeff[,i], nrow=M, ncol=M))^2)
}
final_msd <- mean(msd)
return(final_msd)
}
tvp_bar <- function(T, M, p, train, y, x, mcmc_iter, h_steps, print_status=FALSE) {
prediction_list_tvp <- list()
for (i in train:(T - 1)) {
if (print_status) {
if (i %% 10 == 0) {
cat("\014")
print("Progress of TVP-B-AR with Minnesota prior...")
}
print(sprintf("Progress %i/%i", i - train + 1, number_of_predictions))
}
prediction <- c()
for (m in 1:M) {
y_subset <- y[1:i,m]
x_subset <- x[1:i,]
if (m != 1) {
contemporaneous_y <- y[1:i,seq(m-1)]
x_complete <- cbind(x_subset, contemporaneous_y)
} else {
x_complete <- x_subset
}
variable_string <- c()
number_of_variables <- dim(x_complete)[2]
for (i in 1:number_of_variables) {
variable_string <- c(variable_string, paste("V", i, sep=""))
}
colnames(x_complete) <- variable_string
data <- cbind(y_subset,x_complete)
tvp_fit <- shrinkTVP(y_subset ~ .,
data=data,
niter=mcmc_iter,
nburn=floor(mcmc_iter/2),
display_progress=FALSE)
beta_mean <- unlist(lapply(lapply(tvp_fit$beta, colMeans), tail, 1))
h_prediction <- c()
if (m != 1) {
for (h in 1:h_steps) {
h_prediction <- rbind(h_prediction, beta_mean[2:(M+1+(m-1))] %*% t(cbind(as.matrix(x[i+h,]), as.matrix(y[i+h,seq(m-1)]))))
}
} else {
for (h in 1:h_steps) {
h_prediction <- rbind(h_prediction, beta_mean[2:(M+1)] %*% t(as.matrix(x[i+h,])))
}
}
# for (h in 1:h_steps) {
#   h_prediction <- rbind(h_prediction, beta_mean[2:(M+1)] %*% t(as.matrix(x[i+h,])))
# }
prediction <- cbind(prediction, h_prediction)
}
prediction_list_tvp <- append(prediction_list_tvp, list(prediction))
}
msfe_tvp_bar <- h_step_msfe(h_steps, prediction_list_tvp, y, train)
return(msfe_tvp_bar)
}
tvp_bar_msd <- function(T, M, p, y, x, mcmc_iter, true_coeff, print_status=FALSE) {
mcmc_iter <- mcmc_iter*2
estimated_coeff <- c()
for (m in 1:M) {
y_all <- y[,m]
x_all <- x
if (m != 1) {
contemporaneous_y <- y[,seq(m-1)]
x_all_complete <- cbind(x_all, contemporaneous_y)
} else {
x_all_complete <- x_all
}
variable_string <- c()
number_of_variables <- dim(x_all_complete)[2]
for (i in 1:number_of_variables) {
variable_string <- c(variable_string, paste("V", i, sep=""))
}
colnames(x_all_complete) <- variable_string
data <- cbind(y_all,x_all_complete)
tvp_fit <- shrinkTVP(y_all ~ .,
data=data,
niter=mcmc_iter,
nburn=floor(mcmc_iter/2),
display_progress=FALSE)
estimated_coeff <- cbind(estimated_coeff, matrix(unlist(lapply(tvp_fit$beta, colMeans)), T)[,2:(M+1)])
}
final_msd <- mean(colMeans((t(estimated_coeff)[,2:T] - coeff)^2))
return(final_msd)
}
run <- 1
T = 200
train <- T+1-50
number_of_predictions <- T - train
h_steps <- 8
p <- 1
mcmc_iter <- 1000
M = 2
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
## VAR-OLS ##
start_time = proc.time()
msfe_var_ols <- var_ols(T, M, p, train, y_dgp, h_steps)
msd_var_ols <- var_ols_msd(T, M, p, y_dgp, coeff)
print(paste("VAR -> DONE! | elapsed: ", round((proc.time() - start_time)[3],4), ' seconds | MSFE: ',  round(mean(unlist(msfe_var_ols)),4)," | MSD: ", round(msd_var_ols,6), sep=""))
## B-VAR with Minnesota prior ##
start_time = proc.time()
msfe_bvar_minnesota <- bvar_minnesota(T, M, p, train, y_dgp, x_dgp, mcmc_iter, h_steps)
msd_bvar_minnesota <- bvar_minnesota_msd(T, M, p, y, mcmc_iter, coeff)
print(paste("BVAR -> DONE! | elapsed: ", round((proc.time() - start_time)[3],4), ' seconds | MSFE: ',  round(mean(unlist(msfe_bvar_minnesota)),4), " | MSD: ", round(msd_bvar_minnesota,6), sep=""))
## ARX with OLS ##
start_time = proc.time()
msfe_arx_ols <- arx_ols(T, M, p, train, y_dgp, x_dgp, h_steps)
msd_arx_ols <- arx_ols_msd(T, M, p, y, x, coeff)
print(paste("AR-X -> DONE! | elapsed: ", round((proc.time() - start_time)[3],4), ' seconds | MSFE: ',  round(mean(unlist(msfe_arx_ols)),4), " | MSD: ", round(msd_arx_ols,6), sep=""))
## TVP-B-AR with Minnesota prior ##
start_time = proc.time()
msfe_tvp_bar <- tvp_bar(T, M, p, train, y_dgp, x_dgp, mcmc_iter, h_steps)
msd_tvp_bar <- tvp_bar_msd(T, M, p, y, x, mcmc_iter, coeff)
print(paste("TVP-B-AR -> DONE! | elapsed: ", round((proc.time() - start_time)[3],4), ' seconds | MSFE: ',  round(mean(unlist(msfe_tvp_bar)),4), " | MSD: ", round(msd_tvp_bar,6), sep=""))
result_list <- list("msfe_var_ols" = msfe_var_ols,
"msfe_bvar_minnesota" = msfe_bvar_minnesota,
"msfe_arx_ols" = msfe_arx_ols,
"msfe_tvp_bar" = msfe_tvp_bar,
"msd_var_ols" = msd_var_ols,
"msd_bvar_minnesota" = msd_bvar_minnesota,
"msd_arx_ols" = msd_arx_ols,
"msd_tvp_bar" = msd_tvp_bar)
run <- 1
T = 200
train <- T+1-50
number_of_predictions <- T - train
h_steps <- 8
p <- 1
mcmc_iter <- 1000
M = 2
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
## VAR-OLS ##
start_time = proc.time()
msfe_var_ols <- var_ols(T, M, p, train, y_dgp, h_steps)
msd_var_ols <- var_ols_msd(T, M, p, y_dgp, coeff)
print(paste("VAR -> DONE! | elapsed: ", round((proc.time() - start_time)[3],4), ' seconds | MSFE: ',  round(mean(unlist(msfe_var_ols)),4)," | MSD: ", round(msd_var_ols,6), sep=""))
## B-VAR with Minnesota prior ##
start_time = proc.time()
msfe_bvar_minnesota <- bvar_minnesota(T, M, p, train, y_dgp, x_dgp, mcmc_iter, h_steps)
msd_bvar_minnesota <- bvar_minnesota_msd(T, M, p, y_dgp, mcmc_iter, coeff)
print(paste("BVAR -> DONE! | elapsed: ", round((proc.time() - start_time)[3],4), ' seconds | MSFE: ',  round(mean(unlist(msfe_bvar_minnesota)),4), " | MSD: ", round(msd_bvar_minnesota,6), sep=""))
## ARX with OLS ##
start_time = proc.time()
msfe_arx_ols <- arx_ols(T, M, p, train, y_dgp, x_dgp, h_steps)
msd_arx_ols <- arx_ols_msd(T, M, p, y_dgp, x_dgp, coeff)
print(paste("AR-X -> DONE! | elapsed: ", round((proc.time() - start_time)[3],4), ' seconds | MSFE: ',  round(mean(unlist(msfe_arx_ols)),4), " | MSD: ", round(msd_arx_ols,6), sep=""))
## TVP-B-AR with Minnesota prior ##
start_time = proc.time()
msfe_tvp_bar <- tvp_bar(T, M, p, train, y_dgp, x_dgp, mcmc_iter, h_steps)
msd_tvp_bar <- tvp_bar_msd(T, M, p, y_dgp, x_dgp, mcmc_iter, coeff)
print(paste("TVP-B-AR -> DONE! | elapsed: ", round((proc.time() - start_time)[3],4), ' seconds | MSFE: ',  round(mean(unlist(msfe_tvp_bar)),4), " | MSD: ", round(msd_tvp_bar,6), sep=""))
result_list <- list("msfe_var_ols" = msfe_var_ols,
"msfe_bvar_minnesota" = msfe_bvar_minnesota,
"msfe_arx_ols" = msfe_arx_ols,
"msfe_tvp_bar" = msfe_tvp_bar,
"msd_var_ols" = msd_var_ols,
"msd_bvar_minnesota" = msd_bvar_minnesota,
"msd_arx_ols" = msd_arx_ols,
"msd_tvp_bar" = msd_tvp_bar)
result_list
?commandArgs
mcmc_iter[m]
mcmc_iter[1]
M == m
M == 2
match(M, 2)
match(M, 5)
match(M, 10)
m_list <- c(2,5,10)
match(m_list, 2)
match(m_list, 5)
match(m_list, 5)
?match()
which(m_list == 2)
which(m_list == 5)
which(m_list == 10)
iterations
iterations <- seq(n_iterations)
n_iterations <- 10 #as.numeric(cl_args[1])
iterations <- seq(n_iterations)
iterations
mcmc_iter_list(which(m_list == m))
mcmc_iter_list(which(m_list == 2))
mcmc_iter_list[which(m_list == 2)]
mcmc_iter_list <- c(1000,500,500)
mcmc_iter_list[which(m_list == 2)]
run <- 1
T = 200
train <- T+1-50
number_of_predictions <- T - train
h_steps <- 8
p <- 1
print(paste("Run: ", run, " & M: ", M))
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
## VAR-OLS ##
start_time = proc.time()
msfe_var_ols <- var_ols(T, M, p, train, y_dgp, h_steps)
msd_var_ols <- var_ols_msd(T, M, p, y_dgp, coeff)
elapsed_time = round((proc.time() - start_time)[3],4)
print(paste("VAR -> DONE! | elapsed: ", elapsed_time, ' seconds | MSFE: ',  round(mean(unlist(msfe_var_ols)),4)," | MSD: ", round(msd_var_ols,6), sep=""))
## B-VAR with Minnesota prior ##
start_time = proc.time()
msfe_bvar_minnesota <- bvar_minnesota(T, M, p, train, y_dgp, x_dgp, mcmc_iter, h_steps)
msd_bvar_minnesota <- bvar_minnesota_msd(T, M, p, y_dgp, mcmc_iter, coeff)
elapsed_time = round((proc.time() - start_time)[3],4)
print(paste("BVAR -> DONE! | elapsed: ", elapsed_time, ' seconds | MSFE: ',  round(mean(unlist(msfe_bvar_minnesota)),4), " | MSD: ", round(msd_bvar_minnesota,6), sep=""))
simulation_run(1,2,1000)
simulation_run <- function(run, M, mcmc_iter) {
run <- 1
T = 200
train <- T+1-50
number_of_predictions <- T - train
h_steps <- 8
p <- 1
print(paste("Run: ", run, " & M: ", M))
y_dgp <- read.csv(paste("../simulations/datasets/",paste('y',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
x_dgp <- read.csv(paste("../simulations/datasets/",paste('x',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
coeff <- read.csv(paste("../simulations/datasets/",paste('coefficients',M,T,p,run,sep="_"),'.csv', sep=""), header=FALSE)
## VAR-OLS ##
start_time = proc.time()
msfe_var_ols <- var_ols(T, M, p, train, y_dgp, h_steps)
msd_var_ols <- var_ols_msd(T, M, p, y_dgp, coeff)
elapsed_time = round((proc.time() - start_time)[3],4)
print(paste("VAR -> DONE! | elapsed: ", elapsed_time, ' seconds | MSFE: ',  round(mean(unlist(msfe_var_ols)),4)," | MSD: ", round(msd_var_ols,6), sep=""))
## B-VAR with Minnesota prior ##
start_time = proc.time()
msfe_bvar_minnesota <- bvar_minnesota(T, M, p, train, y_dgp, x_dgp, mcmc_iter, h_steps)
msd_bvar_minnesota <- bvar_minnesota_msd(T, M, p, y_dgp, mcmc_iter, coeff)
elapsed_time = round((proc.time() - start_time)[3],4)
print(paste("BVAR -> DONE! | elapsed: ", elapsed_time, ' seconds | MSFE: ',  round(mean(unlist(msfe_bvar_minnesota)),4), " | MSD: ", round(msd_bvar_minnesota,6), sep=""))
## ARX with OLS ##
start_time = proc.time()
msfe_arx_ols <- arx_ols(T, M, p, train, y_dgp, x_dgp, h_steps)
msd_arx_ols <- arx_ols_msd(T, M, p, y_dgp, x_dgp, coeff)
elapsed_time = round((proc.time() - start_time)[3],4)
print(paste("AR-X -> DONE! | elapsed: ", elapsed_time, ' seconds | MSFE: ',  round(mean(unlist(msfe_arx_ols)),4), " | MSD: ", round(msd_arx_ols,6), sep=""))
## TVP-B-AR with Minnesota prior ##
start_time = proc.time()
msfe_tvp_bar <- tvp_bar(T, M, p, train, y_dgp, x_dgp, mcmc_iter, h_steps)
msd_tvp_bar <- tvp_bar_msd(T, M, p, y_dgp, x_dgp, mcmc_iter, coeff)
elapsed_time = round((proc.time() - start_time)[3],4)
print(paste("TVP-B-AR -> DONE! | elapsed: ", elapsed_time, ' seconds | MSFE: ',  round(mean(unlist(msfe_tvp_bar)),4), " | MSD: ", round(msd_tvp_bar,6), sep=""))
result_list <- list("msfe_var_ols" = msfe_var_ols,
"msfe_bvar_minnesota" = msfe_bvar_minnesota,
"msfe_arx_ols" = msfe_arx_ols,
"msfe_tvp_bar" = msfe_tvp_bar,
"msd_var_ols" = msd_var_ols,
"msd_bvar_minnesota" = msd_bvar_minnesota,
"msd_arx_ols" = msd_arx_ols,
"msd_tvp_bar" = msd_tvp_bar)
return(result_list)
}
simulation_run(1,2,1000)
detectCores()
